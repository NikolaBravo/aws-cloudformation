{% 
  macro resources(
    vpc_cidr,
    public_subnets=['public'],
    private_subnets=['medium','high','management'], 
    az_count=2, 
    subnet_size=24,
    dns_servers=[],
    domain_name='',
    vpc_root_domain='',
    private_domains=[],
    public_domains=[],
    prefix='default')
%}
  Vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "{{ vpc_cidr }}"
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: "Name"
          Value: "{{ prefix + '-vpc' }}"
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties: 
      Tags:
        - Key: "Name"
          Value: "{{ prefix + '-igw' }}"
        - Key: "org:security:level"
          Value: "public"
  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: { "Ref": "InternetGateway" }
      VpcId:
        Ref: Vpc
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: "Name"
          Value: "{{ prefix + '-public-route-table' }}"
        - Key: "org:security:level"
          Value: "public"
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: "Name"
          Value: "{{ prefix + '-private-route-table' }}"
        - Key: "org:security:level"
          Value: "mixed"
  PublicDefaultRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "InternetGatewayAttachment"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: { "Ref": "InternetGateway" }
      RouteTableId: { "Ref": "PublicRouteTable" }
  S3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds: 
        - { "Ref" : "PublicRouteTable" }
        - { "Ref" : "PrivateRouteTable" }
      ServiceName: 
        Fn::Sub: "com.amazonaws.${AWS::Region}.s3"
      VpcId:
        Ref: Vpc
{% if domain_name or dns_servers %}
  DhcpOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
{% if domain_name %}
      DomainName: "{{ domain_name }}"
{% elif vpc_root_domain %}
      DomainName:
        Fn::Sub: "${Vpc}.{{ vpc_root_domain }}"
{% endif %}
{% if dns_servers %}
      DomainNameServers: {{ dns_servers | to_json }}
{% endif %}
      Tags:
        - Key: "Name"
          Value: "{{ prefix + '-dhcpopts' }}"
        - Key: "org:security:level"
          Value: "mixed"
  DhcpOptionsAssociation: 
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: { "Ref": "DhcpOptions" }
      VpcId:
        Ref: Vpc
{% endif %}
{% if vpc_root_domain %}
  VpcPrivateZone:
    Type: "AWS::Route53::HostedZone"
    Properties: 
      HostedZoneConfig: 
        Comment: 
          Fn::Sub: "${Vpc} private zone"
      HostedZoneTags:
        - Key: "Name"
          Value: 
            Fn::Sub: "${Vpc}.{{ vpc_root_domain }}"
        - Key: "org:security:level"
          Value: "mixed"
      Name:
        Fn::Sub: "${Vpc}.{{ vpc_root_domain }}"
      VPCs:
        - VPCId: { "Ref": "Vpc" }
          VPCRegion: { "Ref": "AWS::Region" }
{% endif %}
{% for domain in (private_domains + public_domains) %}
  {{ domain | regex_replace('[^a-zA-Z0-9]', ' ') | title | regex_replace('\s', '') + 'Zone' }}:
      Type: "AWS::Route53::HostedZone"
      Properties: 
        HostedZoneConfig: 
          Comment: "{{ domain + ' private zone' }}"
        HostedZoneTags:
          - Key: "Name"
            Value: "{{ domain }}"
          - Key: "org:security:level"
            Value: "mixed"
        Name: "{{ domain }}"
{% if domain in private_domains %}        
        VPCs:
          - VPCId:
              Ref: Vpc
            VPCRegion: { "Ref": "AWS::Region" }
{% endif %}
{% endfor %}
{% for subnet in (public_subnets + private_subnets) %}
{% set outer_loop = loop %}
{% for zone in range(0, az_count) %}
{% set subnet_name = subnet | title + "Subnet" + "ABC"[loop.index0] %}
  {{ subnet_name }}:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: "{{ vpc_cidr | ipsubnet(subnet_size, 2 * outer_loop.index0 + loop.index0) }}"
      AvailabilityZone: 
        Fn::Sub: "${AWS::Region}{{ 'abc'[loop.index0] }}"
      Tags:
        - Key: "Name"
          Value: "{{ subnet | lower }}-{{ 'abc'[loop.index0] }}"
        - Key: "org:security:level"
          Value: "{{ subnet | lower }}"
  {{ subnet_name + "Routing" }}:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
{% if subnet in public_subnets %}
      RouteTableId: { "Ref": "PublicRouteTable" }
{% else %}
      RouteTableId: { "Ref": "PrivateRouteTable" }
{% endif %}
      SubnetId: { "Ref": "{{ subnet_name }}" }
{% endfor %}
{% endfor %}
{% endmacro %}

{% macro outputs(
  vpc_cidr,
  public_subnets=['public'],
  private_subnets=['medium','high','management'], 
  az_count=2, 
  subnet_size=24,
  dns_servers=[],
  domain_name='',
  vpc_root_domain='',
  private_domains=[],
  public_domains=[],
  prefix='default')
%}
  {{ prefix | title + 'VpcId' }}:
    Description: "{{ prefix | title + ' VPC Identifier' }}"
    Value:
      Ref: Vpc
    Export:
      Name: "{{ prefix | title + 'VpcId' }}"
  {{ prefix | title + 'VpcCidr' }}:
    Description: "{{ prefix | title + ' VPC CIDR Block' }}"
    Value: "{{ vpc_cidr }}"
    Export:
      Name: "{{ prefix | title + 'VpcCidr' }}"
  {{ prefix | title + 'VpcDnsServer' }}:
    Description: "{{ prefix | title + ' VPC AWS Provided DNS Server IP Address' }}"
    Value: "{{ vpc_cidr | ipaddr('2') | ipaddr('address') }}"
    Export:
      Name: "{{ prefix | title + 'VpcDnsServer' }}"
{% if vpc_root_domain %}
  {{ prefix | title + 'VpcDomain' }}:
    Description: "{{ prefix | title + ' VPC Domain' }}"
    Value: 
      Fn::Sub: "${Vpc}.{{ vpc_root_domain }}"
    Export:
      Name: "{{ prefix | title + 'VpcDomain' }}"
  {{ prefix | title + 'VpcZone' }}:
    Description: "{{ prefix | title + ' VPC Zone' }}"
    Value: 
      Fn::Sub: "${Vpc}.{{ vpc_root_domain }}."
    Export:
      Name: "{{ prefix | title + 'VpcZone' }}"
{% endif %}
{% for subnet in (public_subnets + private_subnets) %}
{% set outer_loop = loop %}
{% for zone in range(0, az_count) %}
{% set subnet_name = subnet | title + "Subnet" + "ABC"[loop.index0] %}
  {{ prefix | title + subnet_name }}:
    Description: "{{ prefix | title + subnet | title + " Subnet " + "Availability Zone " + "ABC"[loop.index0] }}"
    Value: { "Ref": "{{ subnet_name }}" }
    Export:
      Name: "{{ prefix | title + subnet_name }}"
  {{ prefix | title + subnet_name + "Cidr" }}:
    Description: "{{ prefix | title + " " + subnet | title + " Subnet " + " Availability Zone " + "ABC"[loop.index0] + " CIDR" }}"
    Value: "{{ vpc_cidr | ipsubnet(subnet_size, 2 * outer_loop.index0 + loop.index0) }}"
    Export:
      Name: "{{ prefix | title + subnet_name + "Cidr" }}"
{% endfor %}
{% endfor %}
{% endmacro %}