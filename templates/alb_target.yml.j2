#jinja2: lstrip_blocks: True
---
AWSTemplateFormatVersion: "2010-09-09"

Description: ECS Stack

Parameters:
  VpcName:
    Type: String
    Description: CloudFormation export prefix that defines the target VPC
    Default: Default
  LoadBalancerResourceName:
    Type: String
    Description: If a-part of a composite template, this can be used for dependencies and cloudwatch alarms
    Default: NONE
  LoadBalancerArn:
    Type: String
    Description: The ALB this target group is attached to
  LoadBalancerSecurityGroup:
    Type: String
    Description: The ALB security group ARN
  TargetGroupPort:
    Type: Number
    Description: Default target group backend port
  TargetGroupProtocol:
    Type: String
    Description: Default target group backend protocol
    Default: HTTP
    AllowedValues:
      - HTTP
      - HTTPS
  TargetGroupHealthCheck:
    Type: String
    Description: Health check path of default target group
    Default: /
  TargetGroupHealthCheckStatusCode:
    Type: String
    Description: Status code(s) permitted under healthcheck
    Default: "200"
  TargetSecurityGroup:
    Type: String
    Description: Default target security group
  HttpPort:
    Type: Number
    Description: Load balancer HTTP listener port
    Default: 0
  HttpsPort:
    Type: Number
    Description: Load balancer HTTPS listener port
    Default: 0
  Certificate:
    Type: String
    Description: CloudFormation export that defines certificate ARN
    Default: ""
  ConnectionDrainTimeout:
    Type: Number
    Description: Maximum time to drain connections
    Default: 300
  CloudwatchAlarms:
    Type: String
    Description: ARN of SNS topic for CloudWatch Alarms
    Default: NONE

Conditions:
  HttpEnabled:
    Fn::Not:
      - Fn::Equals:
        - Ref: HttpPort
        - 0
  HttpsEnabled:
    Fn::Not:
      - Fn::Equals:
        - Ref: HttpsPort
        - 0
  CloudwatchAlarmsTopicExists:
    Fn::Not:
      - Fn::Equals:
        - Ref: CloudwatchAlarms
        - NONE
  LoadBalancerResourceNameExists:
    Fn::Not:
      - Fn::Equals:
        - Ref: LoadBalancerResourceName
        - NONE

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcName}VpcId
      Protocol:
        Ref: TargetGroupProtocol
      Port:
        Ref: TargetGroupPort
      HealthCheckPath:
        Ref: TargetGroupHealthCheck
      HealthCheckPort:
        Ref: TargetGroupPort
      Matcher:
        HttpCode:
          Ref: TargetGroupHealthCheckStatusCode
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value:
            Ref: ConnectionDrainTimeout
  ToTargetGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort:
        Ref: TargetGroupPort
      ToPort:
        Ref: TargetGroupPort
      GroupId:
        Ref: TargetSecurityGroup
      SourceSecurityGroupId:
        Ref: LoadBalancerSecurityGroup
  ToTargetGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort:
        Ref: TargetGroupPort
      ToPort:
        Ref: TargetGroupPort
      GroupId:
        Ref: LoadBalancerSecurityGroup
      DestinationSecurityGroupId:
        Ref: TargetSecurityGroup
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
    Condition: HttpEnabled
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancerArn
      Port:
        Ref: HttpPort
      Protocol: HTTP
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
    Condition: HttpsEnabled
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancerArn
      Port:
        Ref: HttpsPort
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Ref: Certificate
  TargetGroupTargetResponseTime:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: alb latency check
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 2
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: LoadBalancerArn
          Value:
            Ref: LoadBalancerArn
        - Name: TargetGroup
          Value:
            Fn::Sub: ${TargetGroup.TargetGroupFullName}
  TargetGroupUnHealthyHostCount:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: alb unhealthy host check
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 10
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: LoadBalancerArn
          Value:
            Ref: LoadBalancerArn
        - Name: TargetGroup
          Value:
            Fn::Sub: ${TargetGroup.TargetGroupFullName}
  TargetGroupHTTPCodeELB5XX:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: alb HTTP 5XX code check
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: LoadBalancerArn
          Value:
            Ref: LoadBalancerArn
        - Name: TargetGroup
          Value:
            Fn::Sub: ${TargetGroup.TargetGroupFullName}
  TargetGroupRejectedConnectionCount:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: alb rejected connection count check
      MetricName: RejectedConnectionCount
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 10
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: LoadBalancerArn
          Value:
            Ref: LoadBalancerArn
        - Name: TargetGroup
          Value:
            Fn::Sub: ${TargetGroup.TargetGroupFullName}

  DependencyAnchor:
    Type: AWS::CloudFormation::WaitConditionHandle
    DependsOn:
      {% if Config.Properties.HttpPort|default(False) %}
      - HttpListener
      {% endif %}
      {% if Config.Properties.HttpsPort|default(False) %}
      - HttpsListener
      {% endif %}
