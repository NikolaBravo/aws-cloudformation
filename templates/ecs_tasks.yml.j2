AWSTemplateFormatVersion: "2010-09-09"

Description: ECS Task Runner Step Function Template

Metadata:
  Stack::Transform:
    DefaultDependencyMappings:
      - StateMachine

Parameters:
  Name:
    Type: String
    Description: Name of ECS Task Runner
  CloudwatchAlarms:
    Type: String
    Description: ARN of SNS topic for CloudWatch Alarms
    Default: NONE
  Cluster:
    Type: String
    Description: ECS Cluster to run tasks on
  EcsTaskRunnerVersion:
    Type: String
    Description: ECS Task Runner Lambda function S3 object version
    Default: latest
  ScheduleExpression:
    Type: String
    Description: Event cron or rate schedule expression
    Default: NONE
  StepFunctionLambdaVersion:
    Type: String
    Description: Invoke Step Function Lambda function S3 object version
    Default: latest
  TaskDefinition:
    Type: String
    Description: Task definition to run.  Requires ScheduleExpression to be set.
    Default: NONE
  LogRetention:
    Type: Number
    Description: Log retention in days
    Default: 30
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

Conditions:
  CloudwatchAlarmsTopicExists:
    Fn::Not:
      - Fn::Equals:
        - Ref: CloudwatchAlarms
        - NONE
  EcsTaskRunnerLatest:
    Fn::Equals:
      - Ref: EcsTaskRunnerVersion
      - latest
  StepFunctionLambdaLatest:
    Fn::Equals:
      - Ref: StepFunctionLambdaVersion
      - latest
  CreateEvent:
    Fn::Not:
      - Fn::Equals:
        - Ref: ScheduleExpression
        - NONE

Resources:
  Event:
    Type: AWS::Events::Rule
    Condition: CreateEvent
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} ${Name} CloudWatch Event
      ScheduleExpression: 
        Ref: ScheduleExpression
      Targets:
        - Arn:
            Fn::Sub: ${ScheduledEventFunction.Arn}
          Id:
            Fn::Sub: ${AWS::StackName}-${Name}-event
          Input: 
            Fn::Sub: >
              {
                "StateMachineArn": "${StateMachine}",
                "Input": {
                  "Cluster": "${Cluster}",
                  "TaskDefinition": "${TaskDefinition}"
                }
              }
  EventPermission:
    Type: AWS::Lambda::Permission
    Condition: CreateEvent
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: 
        Ref: ScheduledEventFunction
      Principal: events.amazonaws.com
      SourceArn: 
        Fn::Sub: ${Event.Arn}
  FailedInvocationsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateEvent
    Properties:
      AlarmDescription: Failed invocations check
      MetricName: FailedInvocations
      Namespace: AWS/Events
      Statistic: SampleCount
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: RuleName
          Value:
            Ref: Event
  ThrottledRulesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateEvent
    Properties:
      AlarmDescription: Failed invocations check
      MetricName: ThrottledRules
      Namespace: AWS/Events
      Statistic: SampleCount
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: RuleName
          Value:
            Ref: Event
  ScheduledEventRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
      - PolicyName: InvokeStepsFunction
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource:
              - Ref: StateMachine
  ScheduledEventFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - ScheduledEventFunctionLogGroup
    Properties:
      Description:
        Fn::Sub: ${AWS::StackName} ${Name} Invoke State Machine Function
      Handler: step_function.handle
      MemorySize: 128
      Runtime: python2.7
      Timeout: 300
      Role: 
        Fn::Sub: ${ScheduledEventFunctionRole.Arn}
      FunctionName: 
        Fn::Sub: ${AWS::StackName}-${Name}-stepFunction
      Code:
        S3Bucket: 
          Fn::Sub: ${AWS::AccountId}-cfn-lambda
        S3Key: stepFunction.zip
        S3ObjectVersion:
          Fn::If:
            - StepFunctionLambdaLatest
            - Ref: AWS::NoValue
            - Ref: StepFunctionLambdaVersion
  ScheduledEventFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
      - PolicyName: InvokeStepsFunction
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource:
              - Ref: StateMachine
          - Sid: ManageLambdaLogs
            Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: 
              - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-${Name}-stepFunction:*:*
  ScheduledEventFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: 
        Fn::Sub: /aws/lambda/${AWS::StackName}-${Name}-stepFunction
      RetentionInDays:
        Ref: LogRetention
  EcsCreateTaskFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - EcsCreateTaskLogGroup
    Properties:
      Description: 
        Fn::Sub: ${AWS::StackName} ${Name} Create Task Function
      Handler: create_task.handler
      MemorySize: 128
      Runtime: python2.7
      Timeout: 300
      Role: 
        Fn::Sub: ${EcsTaskRunnerRole.Arn}
      FunctionName: 
        Fn::Sub: ${AWS::StackName}-${Name}-ecsCreateTask
      Code:
        S3Bucket: 
          Fn::Sub: ${AWS::AccountId}-cfn-lambda
        S3Key: ecsTasks.zip
        S3ObjectVersion:
          Fn::If:
            - EcsTaskRunnerLatest
            - Ref: AWS::NoValue
            - Ref: EcsTaskRunnerVersion
  EcsCheckTaskFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - EcsCheckTaskLogGroup
    Properties:
      Description: 
        Fn::Sub: ${AWS::StackName} ${Name} Check Task Function
      Handler: check_task.handler
      MemorySize: 128
      Runtime: python2.7
      Timeout: 300
      Role:
        Fn::Sub: ${EcsTaskRunnerRole.Arn}
      FunctionName: 
        Fn::Sub: ${AWS::StackName}-${Name}-ecsCheckTask
      Code:
        S3Bucket: 
          Fn::Sub: ${AWS::AccountId}-cfn-lambda
        S3Key: ecsTasks.zip
        S3ObjectVersion:
          Fn::If:
            - EcsTaskRunnerLatest
            - Ref: AWS::NoValue
            - Ref: EcsTaskRunnerVersion
  EcsTaskRunnerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
      - PolicyName: ECSPermissions
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Sid: TaskDefinition
            Effect: Allow
            Action:
            - ecs:DescribeTaskDefinition
            Resource: "*"
          - Sid: EcsTasks
            Effect: Allow
            Action:
            - ecs:DescribeTasks
            - ecs:ListTasks
            - ecs:RunTask
            - ecs:StartTask
            - ecs:StopTask
            - ecs:DescribeContainerInstances
            - ecs:ListContainerInstances
            Resource: "*"
            Condition:
              ArnEquals:
                ecs:cluster: 
                  Fn::Sub: arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${Cluster}
          - Sid: ManageLambdaLogs
            Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: 
              - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-${Name}-ecsCreateTask:*:*
              - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-${Name}-ecsCheckTask:*:*
              - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-${Name}-cfnEcsTasks:*:*
  EcsCreateTaskLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: 
        Fn::Sub: /aws/lambda/${AWS::StackName}-${Name}-ecsCreateTask
      RetentionInDays:
        Ref: LogRetention
  EcsCheckTaskLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: 
        Fn::Sub: /aws/lambda/${AWS::StackName}-${Name}-ecsCheckTask
      RetentionInDays:
        Ref: LogRetention
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: 
        Fn::Sub: |
          {
            "Comment": "ECS Task Runner",
            "StartAt": "CreateTask",
            "States": {
              "CreateTask": {
                "Type": "Task",
                "Resource": "${EcsCreateTaskFunction.Arn}",
                "Next": "CheckTaskResult"
              },
              "CheckTask": {
                "Type": "Task",
                "Resource": "${EcsCheckTaskFunction.Arn}",
                "Next": "CheckTaskResult"
              },
              "CheckTaskResult": {
                "Type" : "Choice",
                "Choices": [
                  {
                    "Variable": "$.Status",
                    "StringEquals": "STOPPED",
                    "Next": "CompletedTask"
                  },
                  {
                    "Variable": "$.Status",
                    "StringEquals": "FAILED",
                    "Next": "FailedTask"
                  }
                ],
                "Default": "WaitState"
              },
              "WaitState": {
                "Type" : "Wait",
                "SecondsPath": "$.Poll",
                "Next": "CheckTask"
              },
              "CompletedTask": {
                "Type" : "Pass",
                "End": true
              },
              "FailedTask": {
                "Type": "Fail",
                "Cause": "$.reason"
              }
            }
          }
      RoleArn:
        Fn::Sub: ${StateMachineRole.Arn}
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
      - PolicyName: InvokeLambdaFunctions
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
              - Fn::Sub: ${EcsCreateTaskFunction.Arn}
              - Fn::Sub: ${EcsCheckTaskFunction.Arn}

Outputs:
  StateMachine:
    Description: ECS Task Runner Step Function State Machine
    Value:
      Ref: StateMachine
  ScheduledEventRole:
    Description: ARN of IAM role that grants permissions for CloudWatch events to schedule state machine jobs 
    Value:
      Fn::Sub: ${ScheduledEventRole.Arn}
  ScheduledEventFunction:
    Description: ARN of Lambda function role that invokes state machine jobs (executions)
    Value:
      Fn::Sub: ${ScheduledEventFunction.Arn}
